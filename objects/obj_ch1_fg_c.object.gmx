<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-450</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>created_surface=false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>z_offset=-5

bg_target = bg_mountain_scene_fg;
bg_w=background_get_width(bg_target);
bg_h=background_get_height(bg_target)

if (!created_surface) {
    //split int ground:
    split_bg_to_ground(bg_target,4,2);
    created_surface=true;
    var bgh=bg_h;
    with instance_create(-32,-100,impass){
        height=bgh*2
        register_ground(this);
    }
    with instance_create(room_width,-100,impass) {
        height=bgh*2
        register_ground(this); 
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_background(bg_mountain_scene_fg,0,0);
draw_background(bg_mountain_scene_tree,0,0);

if (ch1_ppt_c.anim&lt;30) {
    draw_set_alpha(1-ch1_ppt_c.anim/30);
    draw_set_colour(c_black);
    draw_rectangle(0,0,background_get_width(bg_mountain_scene_fg),background_get_height(bg_mountain_scene_fg),false)
}

var t_h = ch1_ppt_c.t_heartbeat*5

if (t_h&lt;300) {
    var p=min(1,t_h*t_h*power(0.98,t_h)*(1-t_h/300)/1000)
    draw_set_alpha(p)
    draw_set_color(c_black);
    draw_rectangle(0,0,background_get_width(bg_mountain_scene_fg),background_get_height(bg_mountain_scene_fg),false);
}

var p2=1-ch1_ppt_c.insanity_p
if (p2&gt;0) {
    draw_set_alpha(p2)
    draw_set_color(c_black);
    draw_rectangle(0,0,background_get_width(bg_mountain_scene_fg),background_get_height(bg_mountain_scene_fg),false);
}

draw_reset();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
