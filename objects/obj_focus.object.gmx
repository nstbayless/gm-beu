<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>-1000</depth>
  <persistent>0</persistent>
  <parentName>obj_xyz</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>use_subfocus=true;
subfocus[0]=noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (use_subfocus) {
    var count=0;
    var xsum=0;
    var ysum=0;
    var zsum=0;
    var sf;
    for (i=0;true;i++) {
        sf=subfocus[i];
        if (sf==noone)
            break;
        if !instance_exists(sf)
            continue;
        xsum+=sf.x;
        ysum+=sf.y;
        zsum+=sf.z;
        count++;
    }
    if (count&gt;0){
        xtarg=xsum/count;
        ytarg=ysum/count;
        ztarg=zsum/count;
    } else {
        xtarg=x;
        ytarg=y;
        ztarg=z;
    }
}

var CATCH_PROP=.9;
dist = sqrt((x-xtarg)*(x-xtarg)+(y-ytarg)*(y-ytarg)+(z-ztarg)*(z-ztarg))
if (dist&lt;100) {
    CATCH_PROP*=dist/100
}

x=x*CATCH_PROP+xtarg*(1-CATCH_PROP);
y=y*CATCH_PROP+ytarg*(1-CATCH_PROP);
z=z*CATCH_PROP+ztarg*(1-CATCH_PROP);

if (dist&lt;1) {
    x=xtarg;
    y=ytarg;
    z=ztarg;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
