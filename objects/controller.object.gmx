<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>-1000</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>THRESHOLD_AXIS=.7;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>for (var i=0;i&lt;campaign.gamepad_count;i++){
    var amount=rumble[i]*config.RUMBLE_ENABLED
    gamepad_set_vibration(i,amount,amount);
    if (amount&gt;0)
        print("RUMBLE: " + string(amount))
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>move_x[0] = 0;
move_y[0] = 0;
jump_pressed[0]=false;
jump_held[0]=false;
atk_pressed[0]=false
atk_held[0]=false
block_held[0]=false

left_pressed[0]=false;
right_pressed[0]=false;
up_pressed[0]=false;
down_pressed[0]=false;

open_menu_pressed[0]=false;
select_pressed[0]=false;
cancel_pressed[0]=false;

rumble[0]=0;

_last_x[campaign.gamepad_count]=0;
_last_y[campaign.gamepad_count]=0;
for (var i=0;i&lt;campaign.gamepad_count;i++) {
    if (!gamepad_is_connected(i))
        continue;
    move_x[i] = gamepad_axis_value(i, gp_axislh);
    move_y[i] = gamepad_axis_value(i, gp_axislv);
    
    //modification of values...
    move_x[i]=scale_gp_axis(move_x[i]);
    move_y[i]=scale_gp_axis(move_y[i]);
    
    if (gamepad_button_check(i,gp_padl))
        move_x[i]=-1
    if (gamepad_button_check(i,gp_padr))
        move_x[i]=1
    if (gamepad_button_check(i,gp_padd))
        move_y[i]=1
    if (gamepad_button_check(i,gp_padu))
        move_y[i]=-1
    
    jump_pressed[i]=gamepad_button_check_pressed(i,gp_face1);
    jump_held[i]=gamepad_button_check(i,gp_face1);
    atk_pressed[i]=gamepad_button_check_pressed(i,gp_face3);
    atk_held[i]=gamepad_button_check(i,gp_face3);
    block_held[i]=gamepad_button_check(i,gp_shoulderlb);
    
    left_pressed[i]=false;
    right_pressed[i]=false;
    up_pressed[i]=false;
    down_pressed[i]=false;
    
    open_menu_pressed[i]=gamepad_button_check_pressed(i,gp_start);
    select_pressed[i]=gamepad_button_check_pressed(i,gp_face1);
    cancel_pressed[i]=gamepad_button_check_pressed(i,gp_face2)
    
    if (move_x[i]&lt;=-THRESHOLD_AXIS&amp;&amp;_last_x[i]&gt;-THRESHOLD_AXIS)
        left_pressed[i]=true;
    if (move_x[i]&gt;=THRESHOLD_AXIS&amp;&amp;_last_x[i]&lt;THRESHOLD_AXIS)
        right_pressed[i]=true;
    if (move_y[i]&lt;=-THRESHOLD_AXIS&amp;&amp;_last_y[i]&gt;-THRESHOLD_AXIS)
        up_pressed[i]=true;
    if (move_y[i]&gt;=THRESHOLD_AXIS&amp;&amp;_last_y[i]&lt;THRESHOLD_AXIS)
        down_pressed[i]=true;
    //store previous values of axes to check if 'pressed'
    _last_x[i]=move_x[i]
    _last_y[i]=move_y[i]
    
    rumble[i]=0;
}

jump_pressed[0]|=keyboard_check_pressed(ord("Z"));
jump_held[0]|=keyboard_check(ord("Z"));
atk_pressed[0]|=keyboard_check_pressed(ord("X"));
atk_held[0]|=keyboard_check(ord("X"));
block_held[0]|=keyboard_check(vk_shift);

left_pressed[0]|=keyboard_check_pressed(vk_left);
right_pressed[0]|=keyboard_check_pressed(vk_right);
up_pressed[0]|=keyboard_check_pressed(vk_up);
down_pressed[0]|=keyboard_check_pressed(vk_down);

open_menu_pressed[0]|=keyboard_check_pressed(vk_enter);
select_pressed[0]=(select_pressed[0]|keyboard_check_pressed(vk_enter)|keyboard_check_pressed(ord("Z")))&amp;!open_menu_pressed[0];
cancel_pressed[0]=(cancel_pressed[0]|keyboard_check_pressed(vk_escape)|keyboard_check_pressed(ord("X")))

if (keyboard_check(vk_right)) move_x[0]=1;
else if (keyboard_check(vk_left)) move_x[0]=-1;
if (keyboard_check(vk_up)) move_y[0]=-1;
if (keyboard_check(vk_down)) move_y[0]=1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
