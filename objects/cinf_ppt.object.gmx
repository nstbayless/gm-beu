<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1000</depth>
  <persistent>0</persistent>
  <parentName>obj_xyz</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_create(0,150,obj_bg_mountains)
music_play(0);
ins_spawn=instance_create(x+32,y,ch_spawn);
ins_spawn.z=z+96;
ins_spawn.nomap=true;

var cg = instance_create(x,y,camera_guide);
cg.camera_guide_style = cgs_capl;
cg.active=true;
cg.z=z;

cg_capr = instance_create(x,y,camera_guide);
cg_capr.camera_guide_style=cgs_capr;
cg_capr.z=z;

cg.next=cg_capr;
cg_capr.prev=cg;

invis_wall=instance_create(0,0,impass);
invis_wall.height=3000;

next_spawn_x=ins_spawn.x;
next_spawn_y=ins_spawn.y;
next_spawn_z=ins_spawn.z;

//number of generations so far
gen_num=0;

//distance generated so far
gen_x=0;

//range allowed for starting y of next segment
last_ymax=y;
last_ymin=y;

//minimum allowed height of a ground tile
MIN_HEIGHT=32;

anim=0;
randomize();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (camera.x+view_wview[0]&gt;gen_x||gen_num==0) {

    //store coords of start of gen
    gen_start_x=x;
    gen_start_y=y;
    gen_start_z=z;
    
    //generate up to:
    gen_x=x+view_wview[0]+400;
    gen_num++;
    ins_spawn.x=next_spawn_x;
    ins_spawn.y=next_spawn_y;
    ins_spawn.z=next_spawn_z+96;
    
    //add camera guide:
    var cg_insert = instance_create(cg_capr.x,cg_capr.y,camera_guide);
    cg_insert.z=cg_capr.z;
    cg_insert.camera_guide_style=cgs_interp_next_x;
    cg_insert.skew=cg_capr.skew;
    cg_insert.aot=cg_capr.aot;
    
    //insert camera into chain:
    cg_link(cg_capr.prev,cg_insert);
    cg_link(cg_insert,cg_capr);
}

if (gen_x&gt;x) {    
    var dx=180;
    var dy=0;
    var dz=0;
    //height of generated ground:
    var dw_min = -32
    var dw_max = 32
    if (x&lt;gen_x){
        if (gen_num==1){
            gen_num++;
        } else {
            dy=floor(random_range(last_ymin,last_ymax))-y;
            dz=0;
            if (random(1)&lt;0.64)
                dz=irandom(5)*8+24;
            if (random(1)&lt;0.5)
                dz*=-1;
            dx=32*(2+floor(random(6)*random(9)))
            dw_min=floor(-MIN_HEIGHT/2-random(96)*random(4))
            dw_max=floor(MIN_HEIGHT/2+random(96)*random(4))
        }
        z+=dz;
        y+=dy;
        y=round(y/config.STRIP_THICKNESS)*config.STRIP_THICKNESS
        dw_min=round(dw_min/config.STRIP_THICKNESS)*config.STRIP_THICKNESS
        dw_max=round(dw_max/config.STRIP_THICKNESS)*config.STRIP_THICKNESS
        dx=round(dx/32)*32
        if (gen_num)&gt;2
            while (random(1)&lt;0.3) {
                var inst_slime = instance_create(x+random(dx),y+dw_min+random(dw_max-dw_min),dec_sakura);
                inst_slime.z=z;
            }
        if (gen_num)&gt;9
            while (random(1)&lt;0.16) {
                var inst_slime = instance_create(x+random(dx),y+dw_min+random(dw_max-dw_min),mob_warrior);
                inst_slime.z=z+64;
            }
        if (gen_num)&gt;4
            while (random(1)&lt;0.7) {
                var inst_slime = instance_create(x+random(dx),y+dw_min+random(dw_max-dw_min),mob_slime);
                inst_slime.z=z+64;
            }
        generate_ground(x,y+dw_min,z,dx,dw_max-dw_min)
        generate_vwall(x,y+dw_max,z,dx,1000);
        print("generated at +" + string(x-camera.x) + " from camera.");
        last_ymin=y+dw_min;
        last_ymax=y+dw_max;
        x+=dx;
        next_spawn_x=x-dx/3;
        next_spawn_y=y+dw_min/2+dw_max/2;
        next_spawn_z=z;
        cg_capr.x=next_spawn_x;
        cg_capr.y=next_spawn_y;
        cg_capr.z=next_spawn_z;
        if (z&gt;gen_start_z)
            cg_capr.skew=.25;
        else
            cg_capr.skew=-.25;
        abs_ydiff = abs(get_draw_y()-get_draw_y(gen_start_y,gen_start_z))
        if (abs_ydiff&gt;300)
            cg_capr.aot=power(2.7,(300-abs_ydiff)/600);
        else
            cg_capr.aot=1;
    }
    //destroy:
    var max_destroy_x=camera.x-view_wview*3.5;
    invis_wall.x=max_destroy_x+view_wview*(1+abs(camera.skew));
    invis_wall.y=y-invis_wall.height/2
    with (ground) {
        if (x+width&lt;max_destroy_x) {
            instance_destroy();
            print("ground destroyed");
        }
    }
    with (vwall) {
        if (x+width&lt;max_destroy_x) {
            instance_destroy();
            print("vwall destroyed");
            }
    }
    with (camera_guide) {
        if x&lt;max_destroy_x {
            if (instance_exists(prev)) {
                if (instance_exists(prev.prev))
                    with prev.prev instance_destroy();
                with prev camera_guide_style=cgs_capl
                prev.x=x;
                prev.y=y;
                prev.z=z;
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
