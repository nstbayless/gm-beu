<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>2000</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>queue_n=0;
queue_v[0]=noone;

current_line = noone;

is_locked=false;

_result=0; //result of last dialogue option

BOX_OPEN_TIME = 5; //number of frames for box to open/close
_box_open_t = 0;
_box_open = false; //true if box is open or opening, false if closed or closing.

_text_buffer = ""; //fills up with text while advancing through dialogue.
_can_advance=false; //true when dialogue can be advanced.

SPEED_RATE=4; //rate at which player speeds through text
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (_box_open) {
    _box_open_t = min(_box_open_t+1,BOX_OPEN_TIME)
} else {
    _box_open_t = max(_box_open_t-1,0)
}

if (_box_open &amp;&amp; _box_open_t==BOX_OPEN_TIME) {
    //box fully open, add text to buffer:
    var line = current_line;
    repeat (1+_speed_line*(SPEED_RATE-1)) {
        var buffer_i=string_length(_text_buffer)
        if (buffer_i&lt;string_length(line.text))
            _text_buffer+=string_char_at(line.text,buffer_i+1);
    }
    if (_skip_line) {
        _text_buffer=line.text;
    }
    //if buffer full, allow advancing:
    if (string_length(_text_buffer)&gt;=string_length(line.text))
        if (!line.f_wait)
            _can_advance=true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>_speed_line=false
_skip_line=false;
if (_box_open) {
    var line = current_line;
    //TODO: collect player input
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (_box_open_t&lt;=0)
    exit;

var screen_width = config.SCREEN_WIDTH;
var screen_height = config.SCREEN_HEIGHT;


var box_width = 1024-96*2;
var box_height = ceil((128+32)*_box_open_t/BOX_OPEN_TIME);

var box_x = (screen_width-box_width)/2;
var box_y = 96;
draw_reset();

//draw box background:
draw_rectangle_colour(box_x,box_y,box_x+box_width,box_y+box_height,config.DLG_BOX_GRADIENT_TOP,config.DLG_BOX_GRADIENT_TOP,config.DLG_BOX_GRADIENT_BOT,config.DLG_BOX_GRADIENT_BOT,false)

//draw box contents:
var line = current_line;
if (line!=noone &amp;&amp; _box_open_t&gt;=BOX_OPEN_TIME) {
    draw_set_font(jukefont);
    draw_set_halign(fa_left);
    draw_text(box_x+12,box_y,line.speaker);
    if (line.portrait&gt;=0)
        draw_background(line.portrait,box_x+8,box_y+28);
    var draw_text_x = box_x+8;
    if (line.portrait&gt;=0)
        draw_text_x+=4+background_get_width(line.portrait);
    draw_set_font(fnt_dialogue);
    draw_text(draw_text_x,box_y+24,_text_buffer);
}


//draw box border 
draw_set_color(config.DLG_BOX_BORDER_SHADOW)
draw_rectangle(box_x+1,box_y+1,box_x+1+box_width,box_y+1+box_height,true)
draw_set_color(config.DLG_BOX_BORDER)
draw_rectangle(box_x,box_y,box_x+box_width,box_y+box_height,true)

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
