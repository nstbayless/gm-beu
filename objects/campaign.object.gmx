<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>-1001</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// position in the campaign
chapter=0;

chapter_names[0]="Infinite Room"
chapter_names[1]="Engine Demo"
chapter_names[2]="Side view test"

chapter_rooms[0]=rm_inf
chapter_rooms[1]=rm_test_1
chapter_rooms[2]=rm_c1_a

art[0]=art0;
art[1]=art1;
art[2]=art2;
art[3]=art3;

//number of pc's currently playing
pc_count=1
gamepad_count = get_gamepad_count();
if (gamepad_count&gt;0)
    pc_count=gamepad_count;
//the actor controlled by the given player
pc_actor[pc_count]=noone;
//list of people in the party
pc_actor_obj[pc_count]=noone;

for (var i=0;i&lt;pc_count;i++) {
    var pc_to_add=pc_main;
    pc_actor_obj[i]=pc_to_add;
}

possessor_dummy=instance_create(0,0,obj_struct);
possessor_dummy.persistent=true;
with (possessor_dummy) possessor_initialize();

open_menu();
audio_falloff_set_model(audio_falloff_linear_distance_clamped);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//last element encountered on first traversal:
var last_element=-1;
for (var i=0;i&lt;spawn_n;i++) {
    spawn_timer[i]--;
    if spawn_inst[i]&gt;=0 {
        last_element=i;
        if (spawn_timer[i]&lt;=0) {
            instance_activate_object(spawn_inst[i]);
            spawn_inst[i].x=ch_spawn.x;
            spawn_inst[i].y=ch_spawn.y;
            spawn_inst[i].z=ch_spawn.z;
            spawn_inst[i].vspd=0;
            spawn_inst[i].hp=spawn_inst[i].stat_maxhp;
            spawn_inst[i].t_since_hit=-1;
            spawn_inst[i]=noone;
        }
    }
}

spawn_n=last_element+1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (instance_exists(ch_spawn)) {
    if (!instance_exists(obj_focus))
        instance_create(0,0,obj_focus)
    obj_focus.nomap=true;
    for (var i=0;i&lt;pc_count;i++) {
        lpc = instance_create(0,0,pc_actor_obj[i]);
        lpc.player=i;
        lpc.y=ch_spawn.y;
        lpc.x=ch_spawn.x+i*32;
        lpc.z=ch_spawn.z;
        lpc.force_ignore_roomload=true;
        obj_focus.subfocus[i]=lpc;
        obj_focus.subfocus[i+1]=noone;
        pc_actor[i]=lpc;
    }
    camera.focus=obj_focus;
}

//create default room properties:
if (!instance_exists(room_properties)&amp;&amp;room!=rm_scene&amp;&amp;room!=rm_menu)
    instance_create(0,0,room_properties);

//size of spawn list:
spawn_n=0;
//time until respawn:
spawn_timer[0]=0;
//object to respawn:
spawn_inst[0]=noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
