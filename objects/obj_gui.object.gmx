<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-800</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (instance_exists(room_properties)) {
    draw_reset();
    //only draw if this is an actual game-room
    var p_n = campaign.pc_count;
    var player_gui_delta = config.SCREEN_WIDTH/p_n;
    var player_gui_x_offset = player_gui_delta/2;
    draw_set_halign(fa_center)
    draw_set_valign(fa_middle)
    draw_set_font(fnt_script);
    for (var i=0;i&lt;p_n;i++) {
        var cx = player_gui_delta*i+player_gui_x_offset;
        var cy = config.SCREEN_HEIGHT-24;
        var width = 200;
        var xl = cx-width/2;
        var actor_target = campaign.pc_actor[i];
        var hpp = 0;
        var hpp_drain = 0;
        var hp_border_color = c_gray;
        if (instance_exists(actor_target)) {
            hpp=actor_target.hp/actor_target.stat_maxhp;
            hpp_drain = actor_target.hp_bardrain/actor_target.stat_maxhp;
            hp_border_color=c_white;
            with (actor_target)
                if (is_hit_stunned())
                    hp_border_color=c_red;
        }
        draw_set_colour(get_player_color(i));
        draw_set_alpha(0.4);
        draw_circle(cx,cy-48,width/3.5,false);
        draw_set_color(c_white);
        //lighting bubble
        draw_circle(cx-24,cy-48-24,width/13,false)
        draw_reset();
        draw_text(cx,cy-48-7,get_player_name(i))
        draw_set_color(c_black);
        draw_rectangle(xl,cy-12,xl+width,cy+12,false)
        draw_set_color(c_red);
        draw_rectangle(xl+width*(1-hpp_drain),cy-12,xl+width,cy+12,false)
        draw_set_color(c_green);
        draw_rectangle(xl+width*(1-hpp),cy-12,xl+width,cy+12,false)
        draw_set_color(hp_border_color);
        draw_rectangle(xl,cy-12,xl+width,cy+12,true)
    }
    draw_set_halign(fa_left)
    draw_set_valign(fa_top)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
